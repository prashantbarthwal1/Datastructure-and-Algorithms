#include<iostream>
using namespace std;
unsigned long long int count;
void merge(unsigned long long int arr[], unsigned long long int l, unsigned long long int m, unsigned long long int r) 
{ 
    unsigned long long int i, j, k; 
    unsigned long long int n1 = m - l + 1; 
    unsigned long long int n2 =  r - m; 
  
    /* create temp arrays */
    unsigned long long int L[n1], R[n2]; 
  
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
  
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
           
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            count+=n1-i;
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  
    /* Copy the remaining elements of L[], if there 
       are any */
    while (i < n1) 
    { 
      
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
  
    /* Copy the remaining elements of R[], if there 
       are any */
    while (j < n2) 
    { 
  
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 
  
/* l is for left index and r is right index of the 
   sub-array of arr to be sorted */
void mergeSort(unsigned long long int arr[], unsigned long long int l, unsigned long long int r) 
{ 
    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
  
        // Sort first and second halves 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 


int main()
 {
	unsigned long long int t;
	cin>>t;
	while(t--)
	{
	    unsigned long long int arr_size;
	    cin>>arr_size;
	    unsigned long long int *arr;
	    arr=new unsigned long long int[arr_size];
	    for(int i=0;i<arr_size;i++)
	    cin>>arr[i];
	 count=0;
	
	 mergeSort(arr, 0, arr_size - 1); 
	 
	 cout<<count<<endl;
	}
	return 0;
}

